@Has a 포함 관계
-> A Has a B : A안에는 B가 포함되어 있다 라는 뜻
-> Has A 포함 기법이란 활용하고 싶은 클래스의 객체를 멤버변수로 선언하는 방법

-> A클래스 안에 B클래스를 멤버 변수로 사용하겠다 라는 의미
	(기존에 우리가 StudentMgr 안에 Student 클래스 선언한것입니다.)
->자바에서는 데이터를 표현하는 클래스와 운영하는 클래스를 구분하고 있음]
	-데이터 저장용 클래스 : Entity, Vo, DTO, Bean
	-컨트롤용 클래스 : Controller


@기존 코드의 문제점
-> 기존 Has A 포함관계로만 코딩 작성 할 경우 동일한 형태의
Vo객체의 종류가 늘어 날 때마다 Vo객체에 따른 코드 작업이 많아지게 됨
해결방법 : 상속 기법을 배우게 되면 코드 중복의 80%가 해결 될 수 있음

@IS a 상속
-> A is a B : A는 B다!
-> A는 B를 상속 받게 될 경우 A는 B의 것을 가지게 됨
-> 객체 지향 프로그래밍에서는 extends라는 키워드를 이용하여
	상속할 수 있음

@super
->자식 객체에서 부모객체의 생성자를 호출할 때에는 super라는 연산자를 사용
-> super연산자를 이용하여 부모객체의 생성자를 호출하고,
부모 객체의 생성자를 이용하여 데이터 초기화를 진행할 수 있음

super(); //부모클래스의 생성자를 호출해서 자식클래스로 받음

@다형성
->객체 지향 프로그래밍의 3대 특징 중 하나
->상속을 이용한 기술
->메소드의 매개변수 하나가 여러 종류의 클래스 타입을 처리할 수 있는 기능
->상속 관계에 있는 부모, 자식 클래스간에 부모타입은 모든 후손 타입의
주소를 저장할 수 있음
->부모 클래스 타입의 레퍼런스가 후손 객체의 주소를 처리하게 되면
	접근시 부모 클래스가 상속해준것만 접근 가능함
->부모클래스에서 후손 객체를 처리하고 싶다면 "다운캐스팅"을 통해
	형 변환후 사용할 수 있음


@메소드 오버라이딩
->부모 클래스의 메소드를 상속받지 않고, 자식이 재정의할 때 사용하는것을
오버라이딩 이라고 볼 수 있음(@Override)

@에너테이션 (어노테이션) - Java Anootation
->어노테이션은 자바 소스코드에 추가하여 사용할 수 있는 메타데이터
->'@' 기호를 붙여 사용하며 가상 머신에게 해당 문법에 대해서 알려줌
-> 메소드 오버라이드시 @Override를 명시하여 오버라이드 된 메소드라는것을
알려줌 (자바에서는 생략하여도 되지만 꼭!!! 생략하지 마세요)

@abstract (추상 메소드 및 추상 클래스)
->abstract라는 키워드는 추상이라는 의미를 가지고 있는 키워드
->메소드를 abstract로 만들경우 부모 클래스는 자신을 상속 받는 자식들에게는
강제적으로 메소드를 만들게 할 수 있음
(abstract메소드를 선언하게되면 클래스도 abstract를 선언 해야함)
->abstract Class는 객체화할 수 없음


((형변환 연산자)객체이름). 
형변환연산자 : 캐스팅연산자