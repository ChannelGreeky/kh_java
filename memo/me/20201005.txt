@Collection - Map
-> 키(key)와 값(value)으로 구성되어 있으며, 키와 값은 모두 객체
-> 키는 중복 저장을 허용하지 않고, 값은 주복 저장이 가능함
-> 키가 중복되는 경우에는 기존에 있는 키에 해당하는 값을 덮어 씀
-> 구현 클래스는 HashMap, HashTable, LinkedHashMap, Properties, TreeMap이 있음
-> 사용 방법은 Key:Value 형태로 쌍을 이루게 됨

ex. "one":1, "two":2, "three":3 -> "one", "two", "three"는 키 1, 2, 3은 값

@Map의 메소드 종류
-> put(Object key, Object value) : 데이터 입력 및 수정 가능(중복 키를 사용하면 수정)
-> get(Object key) : value값만 꺼내오고 싶을 때 사용
-> remove(Object key) : 데이터 삭제(key를 이용하여 데이터 삭제)
-> containsKey(Object key) : key의 존재 여부를 알 수 있음 (존재하면 true, 없으면 false)

@ Properties 를 배우기 앞서..
-> 훌륭한 프로그래머는 설정정보를 하드코딩해서 넣지 않음
-> 하드코딩해서 넣은 정보는 정보가 변경될 경우 다시 재코딩하고, 재컴파일해야 하는 불편함이 발생
    (훌량한 개발자는 재컴파일을 최대한 막음)
-> Properties 방식을 사용하면 별도의 값들을 파일로 추출하여 처리할 수 있음
-> Properties 파일은 키-값의 쌍들로 이루어지며, 파일의 확장자는 .properties를 사용

@ IO(입출력)
-> 입력과 출력을 의미
-> 자바에서는 입력과 출력 처리를 할 수 있어야 한다.
 - java.io 패키지의 클래스들로 지원
 - 대표적인 입력으로 자바에서는 Scanner가 있음
-> 입출력에는 stream(통로)가 사용이 됨
-> 스트림은 단방향으로써 2가지가 존재한다. (입력용 스트림(InputStream), 출력용 스트림(OutputStream))
※만약 입/출력이 되는 프로그램을 만들고 싶다면?
 -> 입력용 스트림, 출력용 스트림을 각각 만달으야 함

@ next 메소드와 nextLine 메소드
-> next메소드와 nextLine메소드는 둘다 문자열을 입력 받는 메소드
-> next는 하나의 단어만 입력 받는 메소드
	-구분자(\n, \r, \t, 공백 등)가 있으면 입력 종료
	-종료 될 때 구분자를 제외한 문자열만 가져감(구분자가 남음)
->nextLine은 한 줄 자체를 입력 받음(\n을 구분자로 인식)
	-종료 될 때 모든 문자열(특수기호도 가져감)을 가져가고 버퍼를 비운다.

@File 입출력 프로그래밍
1. File 입출력을 위한 스트림
-> 바이트(Byte) 스트림과 문자(Character) 스트림이 있음

@Byte스트림
->스트림 통로로 움직이는 데이터의 크기가 Byte
->사운드, 이미지, 동영상과 같은 바이너리 파일들의 통로로 잘 활용됨
-> 기록된 정보를 정확히 볼 수 없음(바이트 형태)
-> 네트워크 입출력은 바이트스트림만 지원
    (객체를 전송할 떄에는 객체의 직렬화로 바이트 형태로 바꾸어 줌)
※직렬화란? 
-> 객체 안에 기록된 각각의 필드값들을 1바이트 단위로 쪼개서 일렬로 나열시키는 작업
-> 바이트 스트림의 최상위 클래스 : InputStream / OutputStream

@문자 스트림
-> 통로로 움직이는 데이터 크기가 2바이트(문자 단위)
-> 문자 저장용 및 문서 파일들의 통로로 활용 됨
-> 문자 형태이므로 기록된 정보를 볼 수 있음
-> 문자 스트림의 최상위 클래스 : Reader / Writer

※바이트 스트림, 문자 스트림은 각각 read()와 write() 메소드를 활용하여 읽거나 쓰기를 할 수 있음
※최상위 클래스는 최고 조상일 뿐 직접적으로 쓰지 않으니 참고만 하세요

@바이트 스트림
-> 바이트 단위로 데이터를 전송함
-> 바이트 기반 주 스트림과 보조 스트림이 존재
-> 주 스트림 : 디바이스에 직접 연결되는 스트림
-> 보조 스트림 : 주 스트림과 연결을 통해 디바이스에 연결되는 스트림
※ 보조 스트림은 스트림의 기능을 향상시키거나 새로운 기능이 추가된 스트림
주 스트림만으로도 데이터를 전송할 수 있으나 보조 스트림을 쓰게 되면
좀 더 효율적인 코딩이 가능함
단, 직접적인 데이터를 입출력할 수 없어서 주 스트림을 활용 해야 함

@문자 스트림
-> 문자 단위로 데이터를 전송
-> 바이트 스트림과 사용 방법은 거의 같음
-> 영어 이외의 문자에 대한 처리와 인코딩을 내부에서 처리함
-> 문자스트림의 최상위 클래스는 Reader와 Writer

@File Class
-> File Class는 파일과 디렉토리를 다루는데 사용되는 클래스
-> 여러 메소드를 통해 해당 파일의 정보들을 받아올 수 있음

## 자주 사용하는 메소드 ##
getName()	파일명
getPath()		파일 상대경로
getAbsolutePath()	파일 절대 경로
length()		파일의 크기
getParent()	파일의 부모디렉토리 경로
exists()		파일의 존재 여부

