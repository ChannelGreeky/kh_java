@직렬화
-> 객체를 스트림으로 전송하기 위한 작업 (직렬화 작업이라고 함)
	-객체는 큰 덩어리 이기 때문에 바이트 단위로 잘라주어야 한다.
->반대 과정은 역직렬화
	-잘라진 바이트들을 다시 객체화 시키는 것
-> 파일 입출력을 통하여 객체를 저장하기 위해서는 "직렬화"를 통해
    객체들을 바이트 단위로 잘라주어 저장하고, 다시 불러오기 위해서는
    "역직렬화"를 통해 잘라진 바이트들을 객체화 시킴

@ 직렬화를 하기 위한 조건
-> 직렬화 대상 class가 java.io.Serializable을 implements해야 한다.
 (Serializable이 구현되지 않은 클래스의 인스턴스들은 직렬화에서 제외 됨)

@ serialVersionUID
-> serialVersionUID는 직렬화시에 사용되는 객체의 고유 번호
-> Serializable 인터페이스를 implements 하면 serialVersionUID가 선언되지 않았다는 경고가 발생
-> 단, 실제로 선언하지 않았어도 프로그램에는 문제가 되지 않음
    (선언하지 않으면 JVM이 자동으로 임의의 번호를 부여하여 선언 함)
-> 개발자가 수동으로 선언하지 않게 되면, 컴파일러 버전이나 jdk 버전이 다르게 될 경우
    정상적으로 처리할 수 없기 때문에 수동으로 선언해주는 것을 권장

@ transient 키워드
-> 객체 직렬화 처리시 제외할 필드앞에 붙여줌
-> transient 키워드가 붙은 필드는 직렬화시 제외 됨
ex)
public class Student implements Serializable {
	private String name;
	private int age;
	private transient String addr; // addr은 직렬화에서 제외
}

@네트워크란?
-> net+work 의 합성어 : net(그물)+work(일)
-> 단일로 쓰여진 매체를 통신이라는 매개체를 통하여 서로 연결되어 있는 환경을 네트워크라고 부름

@ 네트워킹이란?
-> 두 대 이상의 ㅓㅁ퓨터를 케이블로 연결하여 네트워크를 구성하는 작업

@ 네트워크의 목적
-> 여러 개의 통신기기 들을 서로 연결하여 데이터를 손쉽게 주고 받거나 또는 자원을 공유하기 위함
-> 빠른 데이터 교환도 네트워크 목적의 일종

@ 네트워크에서 필요한 개념
- 서버 : 서비스를 제공하는 컴퓨터
- 클라이언트 : 서비스를 제공받는 컴퓨터

※ 소켓프로그래밍을 하려면 서버와 클라이언트에 대한 프로그램이 각각 있어야함

@꼭 알아야 하는 네트워크 용어
-> 호스트 : 네트워크가 가능한 하나의 통신 기기(ex. 2대의 컴퓨터 = 2대의 호스트)
-> IP주소 : IP 주소는 네트워크상에서 통신기기를 구별하는데 사용하는 고유한 주소
             -IPv4와 IPv6가 있음
             -IPv4는 8bit씩 4구간 32bit로 표현, IPv6는 16bit씩 8구간 128bit로 표현
	 -IPv4는 2^32개의 주소를 가지고, IPv6는 128개의 주소를 가짐
	 -관련 클래스 : InetAddress

-> URL(Uniform Resource Location) : 인터넷에 존재하는 여러 서버들이 제공하는 자원에 접근할 수 있는 주소
			          -프로토콜://호스트명:포트번호/경로명/파일명?쿼리스트링의 형태
ex) http://www.naver.com
 -> 설명
http	           :프로토콜
://	           :프로토콜 구분자
www.naver.com    :호스트명


-> 관련 클래스 : java.net.URL

@ 프로토콜(Protocol)
 - 컴퓨터간의 정보를 주고 받을 때의 통신 방법에 대한 규약
 - 통신 규약이라고 부름
 - 통신 규약은 상호간의 접속이나 전달방식, 통신방식, 데이터 형식,
   검증 방법등을 맞추기 위한 하나의 약속이라고 볼 수 있음
 - HTTP : 인터넷에서 웹 서버와 사용자의 인터넷 브라우저 사이에 문서를 전송하기 위해 사용되는 통신 규약
 - FTP : 인터넷을 통한 컴퓨터에서 다른 컴퓨터로 파일을 전송하기 위한 규약
 - Telnet : 인터넷을 통하여 원격지의 호스트 컴퓨터에 접속할 때 사용하는 규약

@Network Model
 - 데이터를 만들 때 최상의 효율성과 안정성을 보장하기 위해 만들어 놓은 구조
 - 통신이 일어나는 절차를 각 기능별로 모듈화 시켜 만들어 놓은 계층적인 구조
 - OSI 7계층과 TCP/IP 모델이 있음

@OSI 7계층
 - 국제 표준화 기구(ISO)에서 표준화를 위해 개발된 모델
 - 현재 개발할 떄 참조용으로 사용되고 있음
 	- 각 계층의 역할에 맞는 개발에 대한 참조
	 - 문제 발생 시 해결 구조에 대한 참조
 	- 학습 목적으로 참조
 - 7계층 응용 계층(Application Layer) : 사용자 인터페이스를 계층으로 사용자의 명령을 받아주는 계층
 - 6계층 표현 계층(Presentation Layer) : 상위 계층으로 만들어진 데이터의 형태 표현계층(인코딩, 압축 암호화 등)
 - 5계층 세션 계층(Session Layer) : 하위 계층과 상위 계층의 세션 연결 및 동기화를 하기 위한 계층
 - 4계층 전송 계층(Transport Layer) : 데이터 전송 방식 결정 계층 (TCP, UDP)
 - 3계층 네트워크 계층(Network Layer) : 종단 간 연결 보장 계층 (IP주소 사용)
 - 2계층 데이터링크 계층(DataLink Layer) : Node간 연결 보장 계층(MAC Address 사용)
 - 1계층 물리 계층(Physical Layer) : 데이터를 비트 형태의 신호로 바꾸어 물리적으로 전송하기 위해 전기적 신호로 변경하여 전송하는 계층

 ※ 1~4 계층을 하위 계층(하드웨어 계층) 이라고 함 -> 엔지니어 계층 (네트워크 통신 분야)
 ※ 5~7 계층을 상위 계층(소프트웨어 계층) 이라고 함 -> 개발자 계층 (소프트웨어 분야)

@TCP(Transmission Control Protocol)
 -> 데이터 전달의 신뢰성을 최대한 보장하기 위한 방식
 -> 연결 지향
	- 데이터를 전달한 논리적인 연결을 먼저 구성(3way-handshake)
	->세션 연결 설정 => 데이터 전송 => 세션 연결 해제
 -> 신뢰성 보장 : 순차적으로 데이터를 전송하고 확인 응답 및 오류시 재전송
 -> 확실한 데이터 전송을 위해 사용됨
 -> 속도가 UDP에 비해 느리다는 단점이 있음

@UDP(User Datagram Protocol)
 -> 데이터의 빠른 전달을 보장하기 위해 사용 됨
 -> 빠른 속도 보장을 위해 대부분의 기능을 제한 함
	-비 신뢰성 : 확인 응답 및 재전송 작업이 없음
	-비 연결 지향성 : 세션을 맺지 않음
 -> 빠른 데이터 전송을 위해 사용됨(대표적으로 실시간 스트리밍 서비스)
 -> TCP통신에 비해 속도가 빠름

@ Port Number
 -> TCP와 UDP는 통신시 각각의 Port번호를 가지고 있음
 -> 0~65535( TCP와 UDP 각각 해당 범위 사용 가능)
 -> 대표적인 Service
     -HTTP : TCP 80
     -FTP : TCP 21, 20
     -TFTP : UDP 69 (TFTP는 빠른 전송을 위한 FTP)

@소켓 프로그래밍
-> 소켓 프로그래밍은 소켓을 이요한 통신 프로그램을 뜻함
-> 소켓은 서로 멀리 떨어진 두사람이 통신을 하기 위해서는 전화기가 필요한 것처럼
    프로세스간의 통신을 위해서는 별도의 무엇인가가 필요하고 그 무엇인가를 소켓이라고 부름
-> 정리하면 소켓 프로그래밍은 통신을 하는 프로그램을 만드는 행위
-> java.net 패키지를 통해 소켓 프로그래밍을 할 수 있도록 지원
-> 소켓 프로그래밍은 서버 소켓과 클라이언트 소켓을 생성 해야 함

@소켓 프로그래밍 순서
1. 서버부터 구현
2. 서버의 포트 번호를 정함 (ex. 6666, 7777 등)
3. 클라이언트쪽에서 서버를 접속할 수 있도록 대기 상태 구현(서버 소켓)
4. 접속 요청이 들어오면 수락하고 클라이언트와의 소켓 객체를 구현
5. 클라이언트와 정보(데이터)를 주고 받을 수 있도록 입출력 스트림 구현
6. 데이터를 주고받는 코드 구현
7. 통신을 종료하기 위한 코드 구현
----------------------------------------------
8. 클라이언트 코드 구현
9. 서버의 IP 주소와 포트번호 입력(접속할 서버)
10. 서버를 접속하기 위한 클라이언트 소켓 생성
11. 서버와의 입출력 스트림을 오픈 함(서버가 만든것과는 별개)
12. 데이터를 주고 받는 코드 구현
13. 통신을 종료하기 위한 코드 구현